// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Message {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  content       String
  function_name String?
  role          Role
  userId        Int
  User          User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum MessageDirection {
  Inbound
  Outbound
}

model SmsMessage {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  content   String
  direction MessageDirection
  userId    Int
  User      User             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model OpenAiUsage {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  modelName        String
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  userId           Int
  User             User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id          Int              @id @default(autoincrement())
  name        String?          @db.VarChar(255)
  email       String?          @unique @db.VarChar(255)
  phone       String?          @unique @db.VarChar(255)
  dateOfBirth DateTime?
  weightLbs   Float?
  sentContact Boolean          @default(false)
  Message     Message[]
  Foods       LoggedFoodItem[]
  SmsMessage  SmsMessage[]
  OpenAiUsage OpenAiUsage[]
}

enum Role {
  Assistant
  User
  System
  Function
}

model LoggedFoodItem {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  consumedOn    DateTime @default(now())
  name          String
  unit          String
  amount        Float
  fat           Float
  carbohydrates Float
  protein       Float
  calories      Float
  userId        Int
  User          User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model FoodDatabaseItem {
  id                       Int     @id @default(autoincrement())
  code                     String  @unique
  product_name             String
  abbreviated_product_name String?
  generic_name             String?
  quantity                 String?
  countries_en             String?
  serving_size             String?
  serving_quantity         String?
  product_quantity         String?
  image_url                String?
  energy_kcal_100g         String?
  energy_100g              String?
  fat_100g                 String?
  saturated_fat_100g       String?
  carbohydrates_100g       String?
  sugars_100g              String?
  fiber_100g               String?
  proteins_100g            String?
  salt_100g                String?
  sodium_100g              String?
}
