generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Message {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  content         String
  function_name   String?
  role            Role
  userId          String
  itemsProcessed  Int?             @default(0)
  itemsToProcess  Int?             @default(0)
  messageType     MessageType      @default(CONVERSATION)
  resolvedAt      DateTime?
  status          MessageStatus    @default(RECEIVED)
  FoodItems       FoodItem[]
  LoggedFoodItems LoggedFoodItem[]
  User            User             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model SmsMessage {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  content   String
  userId    String
  direction MessageDirection
  User      User             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model SmsAuthCode {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime @default(now())
  code      String   @unique @db.VarChar(64)
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model OpenAiUsage {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  modelName        String
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  userId           String
  User             User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id             String           @id @default(cuid())
  fullName       String?          @db.VarChar(255)
  avatarUrl      String?          @db.VarChar(2048)
  email          String?          @unique @db.VarChar(255)
  emailVerified  DateTime?
  phone          String?          @unique @db.VarChar(255)
  dateOfBirth    DateTime?
  weightKg       Float?
  heightCm       Int?
  calorieGoal    Int?
  proteinGoal    Int?
  carbsGoal      Int?
  fatGoal        Int?
  fitnessGoal    String?
  unitPreference UnitPreference?  @default(IMPERIAL)
  setupCompleted Boolean          @default(false)
  sentContact    Boolean          @default(false)
  tzIdentifier   String           @default("America/New_York")
  sendCheckins   Boolean          @default(false)
  Account        Account[]
  CustomFood     FoodItem[]
  Foods          LoggedFoodItem[]
  Message        Message[]
  OpenAiUsage    OpenAiUsage[]
  Session        Session[]
  SmsAuthCode    SmsAuthCode[]
  SmsMessage     SmsMessage[]
}

model LoggedFoodItem {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  consumedOn         DateTime            @default(now())
  foodItemId         Int?
  grams              Float               @default(0)
  servingId          Int?
  servingAmount      Float?
  loggedUnit         String?
  userId             String              @default("0")
  messageId          Int?
  status             String?
  extendedOpenAiData Json?
  embeddingId        Int?
  foodEmbeddingCache foodEmbeddingCache? @relation(fields: [embeddingId], references: [id])
  FoodItem           FoodItem?           @relation(fields: [foodItemId], references: [id])
  Message            Message?            @relation(fields: [messageId], references: [id], onUpdate: NoAction)
  Serving            Serving?            @relation(fields: [servingId], references: [id])
  User               User                @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model FoodItem {
  id                       Int                    @id @default(autoincrement())
  name                     String                 @default("")
  brand                    String?
  knownAs                  String[]               @default([])
  description              String?
  defaultServingWeightGram Float?
  kcalPerServing           Float                  @default(0)
  totalFatPerServing       Float                  @default(0)
  satFatPerServing         Float?
  transFatPerServing       Float?
  carbPerServing           Float                  @default(0)
  sugarPerServing          Float?
  addedSugarPerServing     Float?
  proteinPerServing        Float                  @default(0)
  lastUpdated              DateTime               @default(now())
  verified                 Boolean                @default(false)
  userId                   String?
  messageId                Int?
  foodInfoSource           FoodInfoSource         @default(User)
  adaEmbedding             Unsupported("vector")?
  UPC                      BigInt?
  defaultServingLiquidMl   Float?
  externalId               String?
  fiberPerServing          Float?
  isLiquid                 Boolean                @default(false)
  weightUnknown            Boolean                @default(false)
  bgeBaseEmbedding         Unsupported("vector")?
  FoodImage                FoodImage[]
  Message                  Message?               @relation(fields: [messageId], references: [id], onUpdate: NoAction)
  User                     User?                  @relation(fields: [userId], references: [id], onUpdate: NoAction)
  LoggedFoodItems          LoggedFoodItem[]
  Nutrients                Nutrient[]
  Servings                 Serving[]

  @@unique([name, brand], name: "name_brand")
  @@unique([externalId, foodInfoSource])
}

model Serving {
  id                     Int              @id @default(autoincrement())
  servingWeightGram      Float?
  servingName            String
  foodItemId             Int
  servingAlternateAmount Float?
  servingAlternateUnit   String?
  LoggedFoodItems        LoggedFoodItem[]
  FoodItem               FoodItem         @relation(fields: [foodItemId], references: [id])
}

model Nutrient {
  id                              Int      @id @default(autoincrement())
  nutrientName                    String
  nutrientUnit                    String
  nutrientAmountPerDefaultServing Float
  foodItemId                      Int
  FoodItem                        FoodItem @relation(fields: [foodItemId], references: [id])
}

model FoodImage {
  id          Int      @id @default(autoincrement())
  pathToImage String
  priority    Int      @default(10)
  foodItemId  Int
  FoodItem    FoodItem @relation(fields: [foodItemId], references: [id])
}

model ApiCalls {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  apiName   String
  queryType String
  count     Int
}

model ApiTokens {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  apiName   String
  token     String   @unique
  expires   DateTime
}

model UsdaFoodItemEmbedding {
  id                Int                    @id @default(autoincrement())
  fdcId             Int                    @unique
  foodName          String
  foodBrand         String?
  brandOwner        String?
  bgeLargeEmbedding Unsupported("vector")?
  bgeBaseEmbedding  Unsupported("vector")?

  @@index([bgeBaseEmbedding])
}

model foodEmbeddingCache {
  id               Int                    @id @default(autoincrement())
  textToEmbed      String                 @unique
  adaEmbedding     Unsupported("vector")?
  bgeBaseEmbedding Unsupported("vector")?
  LoggedFoodItems  LoggedFoodItem[]
}

enum MessageStatus {
  RECEIVED
  PROCESSING
  RESOLVED
  FAILED
}

enum MessageType {
  CONVERSATION
  ASSISTANT
  FOOD_LOG_REQUEST
  SHOW_FOOD_LOG
  LOG_EXERCISE
  UPDATE_USER_INFO
}

enum UnitPreference {
  IMPERIAL
  METRIC
}

enum Role {
  Assistant
  User
  System
  Function
}

enum MessageDirection {
  Inbound
  Outbound
}

enum FoodInfoSource {
  User
  Online
  GPT3
  GPT4
  LLAMA
  LLAMA2
  USDA
  FATSECRET
  NUTRITIONIX
}
